!function(n){"use strict";function r(n,r){if(!(n instanceof r))throw new TypeError("Cannot call a class as a function")}n="default"in n?n.default:n;var t=function(){function n(n,r){for(var t=0;t<r.length;t++){var e=r[t];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}return function(r,t,e){return t&&n(r.prototype,t),e&&n(r,e),r}}(),e=[],o=function(){function n(t,o,i,u,c){"ngInject";r(this,n),this.$log=t,this.$q=o,this.$timeout=i,this.plugin=window.cordova.require("pushwoosh-cordova-plugin.PushNotification"),this.plugin.onDeviceReady({appid:u,projectid:c}),document.addEventListener("push-notification",function(n){return e.forEach(function(r){return r(n.notification)})})}return t(n,[{key:"register",value:function(){var n=this;return this.$q(function(r,t){return n.plugin.registerDevice(r,t)}).then(function(r){return n.$log.debug("$cordovaPushwoosh: device registration successful",r),r.pushToken},function(r){return n.onError(r)})}},{key:"unregister",value:function(){var n=this;return this.$q(function(r,t){return n.plugin.unregisterDevice(r,t)}).catch(function(r){return n.onError(r)})}},{key:"setTags",value:function(){var n=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.$q(function(t,e){return n.plugin.setTags(r,t,e)}).catch(function(r){return n.onError(r)})}},{key:"onNotification",value:function(n){return e.push(n),this}},{key:"onError",value:function(n){return this.$log.error("$cordovaPushwoosh: an error occurred",n),this.$q.reject(n)}}]),n}();n.module("$cordovaPushwoosh",[]).service("$cordovaPushwoosh",o)}(angular);
//# sourceMappingURL=ng-cordova-pushwoosh.min.js.map
