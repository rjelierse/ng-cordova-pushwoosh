{"version":3,"file":"ng-cordova-pushwoosh.min.js","sources":["../src/pushwoosh.service.js","../src/pushwoosh.module.js"],"sourcesContent":["const listeners = [];\n\n/**\n * @ngdoc service\n * @name $cordovaPushwoosh\n * @module $cordovaPushwoosh\n *\n * @requires $log\n * @requires $q\n * @requires $timeout\n */\nexport default class Pushwoosh {\n  constructor($log, $q, $timeout, $cordovaPushwooshAppId, $cordovaPushwooshProjectId) {\n    'ngInject';\n\n    this.$log = $log;\n    this.$q = $q;\n    this.$timeout = $timeout;\n\n    this.plugin = window.cordova.require('pushwoosh-cordova-plugin.PushNotification');\n    this.plugin.onDeviceReady({\n      appid: $cordovaPushwooshAppId,\n      projectid: $cordovaPushwooshProjectId,\n    });\n\n    document.addEventListener(\n      'push-notification',\n      event => listeners.forEach(listener => listener(event.notification)),\n    );\n  }\n\n  /**\n   * @ngdoc method\n   * @name $cordovaPushwoosh#register\n   * @module $cordovaPushwoosh\n   *\n   * @description\n   * Register the device with Pushwoosh\n   *\n   * @returns {Promise<string|Error>}\n   */\n  register() {\n    return this.$q((onSuccess, onError) => this.plugin.registerDevice(onSuccess, onError))\n      .then(\n        (status) => {\n          this.$log.debug('$cordovaPushwoosh: device registration successful', status);\n\n          return status.pushToken;\n        },\n        error => this.onError(error),\n      );\n  }\n\n  /**\n   * @ngdoc method\n   * @name $cordovaPushwoosh#unregister\n   * @module $cordovaPushwoosh\n   *\n   * @description\n   * Cancel device registration with Pushwoosh\n   *\n   * @returns {Promise<void|Error>}\n   */\n  unregister() {\n    return this.$q((onSuccess, onError) => this.plugin.unregisterDevice(onSuccess, onError))\n      .catch(error => this.onError(error));\n  }\n\n  /**\n   * @ngdoc method\n   * @name $cordovaPushwoosh#setTags\n   * @module $cordovaPushwoosh\n   *\n   * @param {Object=} tags\n   * @returns {Promise<void|Error>}\n   */\n  setTags(tags = {}) {\n    return this.$q((onSuccess, onError) => this.plugin.setTags(tags, onSuccess, onError))\n      .catch(error => this.onError(error));\n  }\n\n  /**\n   * @ngdoc method\n   * @name $cordovaPushwoosh#onNotification\n   * @module $cordovaPushwoosh\n   *\n   * @param {Function} listener\n   * @returns {Pushwoosh}\n   */\n  onNotification(listener) {\n    listeners.push(listener);\n\n    return this;\n  }\n\n  onError(error) {\n    this.$log.error('$cordovaPushwoosh: an error occurred', error);\n\n    return this.$q.reject(error);\n  }\n}\n","import angular from 'angular';\nimport PushwooshService from './pushwoosh.service';\n\nconst PushwooshModule = angular.module('$cordovaPushwoosh', []);\n\nexport default PushwooshModule.name;\n\nPushwooshModule.service('$cordovaPushwoosh', PushwooshService);\n"],"names":["listeners","Pushwoosh","$log","$q","$timeout","$cordovaPushwooshAppId","$cordovaPushwooshProjectId","plugin","window","cordova","require","onDeviceReady","addEventListener","forEach","listener","event","notification","this","onSuccess","onError","_this","registerDevice","then","status","debug","pushToken","error","_this2","unregisterDevice","catch","tags","_this3","setTags","push","reject","angular","module","service","PushwooshService"],"mappings":"6YAAMA,KAWeC,wBACPC,EAAMC,EAAIC,EAAUC,EAAwBC,6BAGjDJ,KAAOA,OACPC,GAAKA,OACLC,SAAWA,OAEXG,OAASC,OAAOC,QAAQC,QAAQ,kDAChCH,OAAOI,qBACHN,YACIC,aAGJM,iBACP,oBACA,kBAASZ,GAAUa,QAAQ,kBAAYC,GAASC,EAAMC,gFAejDC,MAAKd,GAAG,SAACe,EAAWC,SAAYC,GAAKb,OAAOc,eAAeH,EAAWC,KAC1EG,KACC,SAACC,YACMrB,KAAKsB,MAAM,oDAAqDD,GAE9DA,EAAOE,WAEhB,kBAASL,GAAKD,QAAQO,2DAenBT,MAAKd,GAAG,SAACe,EAAWC,SAAYQ,GAAKpB,OAAOqB,iBAAiBV,EAAWC,KAC5EU,MAAM,kBAASF,GAAKR,QAAQO,kDAWzBI,kEACCb,MAAKd,GAAG,SAACe,EAAWC,SAAYY,GAAKxB,OAAOyB,QAAQF,EAAMZ,EAAWC,KACzEU,MAAM,kBAASE,GAAKZ,QAAQO,4CAWlBZ,YACHmB,KAAKnB,GAERG,qCAGDS,eACDxB,KAAKwB,MAAM,uCAAwCA,GAEjDT,KAAKd,GAAG+B,OAAOR,WC/FFS,GAAQC,OAAO,wBAIvBC,QAAQ,oBAAqBC"}